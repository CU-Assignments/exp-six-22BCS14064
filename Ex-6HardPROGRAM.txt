import java.sql.*;
import java.util.*;

public class StudentManagementSystem {
    private static final String URL = "jdbc:mysql://localhost:3306/studentdb"; 
    private static final String USER = "root"; 
    private static final String PASSWORD = "password"; 
    static class Student {
        private int studentID;
        private String name;
        private String department;
        private float marks;
        public Student(int studentID, String name, String department, float marks) {
            this.studentID = studentID;
            this.name = name;
            this.department = department;
            this.marks = marks;
        }
        public int getStudentID() {
            return studentID;
        }
        public void setStudentID(int studentID) {
            this.studentID = studentID;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDepartment() {
            return department;
        }

        public void setDepartment(String department) {
            this.department = department;
        }

        public float getMarks() {
            return marks;
        }

        public void setMarks(float marks) {
            this.marks = marks;
        }

        @Override
        public String toString() {
            return "StudentID: " + studentID + ", Name: " + name + ", Department: " + department + ", Marks: " + marks;
        }
    }
    static class StudentController {
        public static Connection getConnection() throws SQLException {
            return DriverManager.getConnection(URL, USER, PASSWORD);
        }
        public static void addStudent(Student student) {
            String query = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
            try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setInt(1, student.getStudentID());
                stmt.setString(2, student.getName());
                stmt.setString(3, student.getDepartment());
                stmt.setFloat(4, student.getMarks());
                stmt.executeUpdate();
                System.out.println("Student added successfully!");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        public static void getAllStudents() {
            String query = "SELECT * FROM Student";
            try (Connection conn = getConnection(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int studentID = rs.getInt("StudentID");
                    String name = rs.getString("Name");
                    String department = rs.getString("Department");
                    float marks = rs.getFloat("Marks");
                    System.out.println(new Student(studentID, name, department, marks));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        public static void updateStudent(Student student) {
            String query = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
            try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, student.getName());
                stmt.setString(2, student.getDepartment());
                stmt.setFloat(3, student.getMarks());
                stmt.setInt(4, student.getStudentID());
                int rowsUpdated = stmt.executeUpdate();
                if (rowsUpdated > 0) {
                    System.out.println("Student updated successfully!");
                } else {
                    System.out.println("No student found with that ID.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        public static void deleteStudent(int studentID) {
            String query = "DELETE FROM Student WHERE StudentID = ?";
            try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setInt(1, studentID);
                int rowsDeleted = stmt.executeUpdate();
                if (rowsDeleted > 0) {
                    System.out.println("Student deleted successfully!");
                } else {
                    System.out.println("No student found with that ID.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            System.out.println("Connected to the database successfully!\n");
            do {
                System.out.println("\nStudent Management System");
                System.out.println("1. Add Student");
                System.out.println("2. View All Students");
                System.out.println("3. Update Student");
                System.out.println("4. Delete Student");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        System.out.print("Enter Student ID: ");
                        int studentID = scanner.nextInt();
                        scanner.nextLine(); 
                        System.out.print("Enter Name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter Department: ");
                        String department = scanner.nextLine();
                        System.out.print("Enter Marks: ");
                        float marks = scanner.nextFloat();
                        Student studentToAdd = new Student(studentID, name, department, marks);
                        StudentController.addStudent(studentToAdd);
                        break;

                    case 2:
                    
                        System.out.println("\nDisplaying all students:");
                        StudentController.getAllStudents();
                        break;

                    case 3:
                       
                        System.out.print("Enter Student ID to update: ");
                        int updateStudentID = scanner.nextInt();
                        scanner.nextLine(); // Consume newline
                        System.out.print("Enter new Name: ");
                        String updateName = scanner.nextLine();
                        System.out.print("Enter new Department: ");
                        String updateDepartment = scanner.nextLine();
                        System.out.print("Enter new Marks: ");
                        float updateMarks = scanner.nextFloat();
                        Student studentToUpdate = new Student(updateStudentID, updateName, updateDepartment, updateMarks);
                        StudentController.updateStudent(studentToUpdate);
                        break;

                    case 4:
                        System.out.print("Enter Student ID to delete: ");
                        int deleteStudentID = scanner.nextInt();
                        StudentController.deleteStudent(deleteStudentID);
                        break;

                    case 5:
                        System.out.println("Exiting the system...");
                        break;

                    default:
                        System.out.println("Invalid choice! Please try again.");
                }
            } while (choice != 5);

        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Error: Unable to connect to the database.");
            e.printStackTrace();
        }
    }
}
